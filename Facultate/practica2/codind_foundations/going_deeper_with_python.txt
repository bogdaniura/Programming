Going Deeper with Python
1. Advanced Data Structures

    Lists, Tuples, Sets, and Dictionaries:
        Advanced list comprehensions.

        python

squares = [x**2 for x in range(10) if x % 2 == 0]

Nested data structures.

python

nested_list = [[1, 2, 3], [4, 5, 6]]

Advanced dictionary manipulations.

python

        new_dict = {key: value**2 for key, value in original_dict.items()}

2. Functions and Functional Programming

    Higher-Order Functions: Using functions like map(), filter(), and reduce().

    python

from functools import reduce

numbers = [1, 2, 3, 4]
squared = map(lambda x: x**2, numbers)
even_numbers = filter(lambda x: x % 2 == 0, numbers)
product = reduce(lambda x, y: x * y, numbers)

Lambda Functions: Anonymous functions for short tasks.

python

add = lambda x, y: x + y
print(add(5, 3))  # Output: 8

Decorators: Enhancing functions without modifying them.

python

    def my_decorator(func):
        def wrapper():
            print("Something is happening before the function is called.")
            func()
            print("Something is happening after the function is called.")
        return wrapper

    @my_decorator
    def say_hello():
        print("Hello!")

    say_hello()

3. Modules and Packages

    Creating and Importing Modules: Organizing code into reusable modules.

    python

# my_module.py
def greet(name):
    return f"Hello, {name}!"

# main.py
import my_module
print(my_module.greet("Alice"))

Using Standard Library Modules: Exploring useful modules like os, sys, datetime, and collections.

python

    import os
    print(os.getcwd())  # Get current working directory

4. File I/O and Data Persistence

    Reading and Writing Files: Advanced file operations.

    python

with open('data.txt', 'w') as file:
    file.write("Hello, World!")

with open('data.txt', 'r') as file:
    content = file.read()

Working with CSV and JSON Files: Reading and writing structured data.

python

    import csv
    import json

    # Writing to a CSV file
    with open('data.csv', mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Name", "Age"])
        writer.writerow(["Alice", 30])

    # Reading from a JSON file
    with open('data.json', 'r') as file:
        data = json.load(file)

5. Error and Exception Handling

    Advanced Exception Handling: Using custom exceptions and handling multiple exceptions.

    python

    class CustomError(Exception):
        pass

    try:
        raise CustomError("An error occurred!")
    except CustomError as e:
        print(e)
    finally:
        print("Execution finished.")

6. Object-Oriented Programming (OOP)

    Class Inheritance and Polymorphism: Creating and utilizing class hierarchies.

    python

class Animal:
    def speak(self):
        raise NotImplementedError("Subclass must implement abstract method")

class Dog(Animal):
    def speak(self):
        return "Woof!"

class Cat(Animal):
    def speak(self):
        return "Meow!"

animals = [Dog(), Cat()]
for animal in animals:
    print(animal.speak())

Special Methods and Operator Overloading: Customizing class behavior.

python

    class Vector:
        def __init__(self, x, y):
            self.x = x
            self.y = y
        
        def __add__(self, other):
            return Vector(self.x + other.x, self.y + other.y)

        def __repr__(self):
            return f"Vector({self.x}, {self.y})"

    v1 = Vector(2, 3)
    v2 = Vector(4, 5)
    print(v1 + v2)  # Output: Vector(6, 8)

7. Working with APIs

    Making HTTP Requests: Using the requests library to interact with web APIs.

    python

    import requests

    response = requests.get('https://api.github.com')
    print(response.json())

8. Testing and Debugging

    Writing Unit Tests: Using unittest or pytest for testing code.

    python

import unittest

def add(x, y):
    return x + y

class TestMathOperations(unittest.TestCase):
    def test_add(self):
        self.assertEqual(add(2, 3), 5)

if __name__ == '__main__':
    unittest.main()

Debugging Techniques: Using pdb for debugging.

python

    import pdb; pdb.set_trace()

9. Advanced Topics

    Generators and Iterators: Efficiently handling large data sets.

    python

def my_generator():
    for i in range(10):
        yield i

gen = my_generator()
for value in gen:
    print(value)

Context Managers: Managing resources with with statements.

python

class MyContextManager:
    def __enter__(self):
        print("Entering context")
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        print("Exiting context")

with MyContextManager():
    print("Inside context")
