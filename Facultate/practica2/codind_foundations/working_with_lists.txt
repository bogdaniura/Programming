1. Introduction to Lists

    Creating Lists:
        Basic list creation and syntax.

        python

my_list = [1, 2, 3, 4, 5]

Creating lists with different data types.

python

        mixed_list = [1, "Hello", 3.14, True]

2. Accessing List Elements

    Indexing:
        Accessing elements using positive and negative indices.

        python

    print(my_list[0])  # Output: 1
    print(my_list[-1])  # Output: 5

Slicing:

    Extracting sublists using slicing.

    python

        sublist = my_list[1:3]  # Output: [2, 3]

3. Modifying Lists

    Adding Elements:
        Using append() to add a single element.

        python

my_list.append(6)

Using extend() to add multiple elements.

python

my_list.extend([7, 8])

Using insert() to add an element at a specific position.

python

    my_list.insert(1, 'a')

Removing Elements:

    Using remove() to delete an element by value.

    python

my_list.remove(3)

Using pop() to remove an element by index.

python

my_list.pop(2)

Using clear() to remove all elements.

python

        my_list.clear()

4. List Operations

    Concatenation:
        Combining lists using the + operator.

        python

    combined_list = my_list + [6, 7]

Repetition:

    Repeating lists using the * operator.

    python

    repeated_list = my_list * 2

Membership:

    Checking if an element is in a list using the in operator.

    python

        print(3 in my_list)  # Output: True

5. Iterating Over Lists

    For Loops:
        Iterating through list elements.

        python

    for item in my_list:
        print(item)

List Comprehensions:

    Creating lists using list comprehensions.

    python

        squares = [x**2 for x in range(10)]

6. Advanced List Techniques

    Sorting Lists:
        Using sort() to sort a list in place.

        python

my_list.sort()

Using sorted() to return a new sorted list.

python

    sorted_list = sorted(my_list)

Reversing Lists:

    Using reverse() to reverse a list in place.

    python

my_list.reverse()

Using slicing to reverse a list.

python

        reversed_list = my_list[::-1]

7. Copying Lists

    Shallow Copy:
        Using copy() method.

        python

new_list = my_list.copy()

Using slicing.

python

    new_list = my_list[:]

Deep Copy:

    Using copy module for nested lists.

    python

        import copy
        deep_copied_list = copy.deepcopy(nested_list)

8. List Methods and Functions

    Common List Methods:
        index(), count(), len(), min(), max(), sum().

        python

        index_of_3 = my_list.index(3)
        count_of_3 = my_list.count(3)
        length = len(my_list)
        minimum = min(my_list)
        maximum = max(my_list)
        total = sum(my_list)

9. Practical Applications

    Examples:
        Using lists to manage a to-do list.

        python

to_do_list = []
to_do_list.append("Finish homework")
to_do_list.append("Read a book")
print(to_do_list)

Using lists to store and manipulate data in a simple inventory system.

python

inventory = ["sword", "shield", "potion"]
inventory.append("helmet")
inventory.remove("potion")
print(inventory)
