1. Advanced HTML Structure

    HTML Document Structure:
        Understanding the complete structure of an HTML document.

        html

    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta name="description" content="Mastering HTML course">
        <title>Mastering HTML</title>
      </head>
      <body>
        <!-- Content here -->
      </body>
    </html>

Metadata:

    Using meta tags for SEO, social media integration, and responsive design.

    html

        <meta name="description" content="Learn advanced HTML techniques.">
        <meta property="og:title" content="Mastering HTML">
        <meta property="og:description" content="Learn advanced HTML techniques.">
        <meta property="og:image" content="image.jpg">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">

2. Semantic HTML

    Advanced Semantic Elements:
        Using <header>, <nav>, <main>, <section>, <article>, <aside>, and <footer> to create meaningful content structure.

        html

        <header>
          <h1>Website Title</h1>
          <nav>
            <ul>
              <li><a href="#home">Home</a></li>
              <li><a href="#about">About</a></li>
              <li><a href="#contact">Contact</a></li>
            </ul>
          </nav>
        </header>
        <main>
          <article>
            <section>
              <h2>Article Title</h2>
              <p>Article content goes here.</p>
            </section>
          </article>
          <aside>
            <h2>Related Links</h2>
            <p>Links to related content.</p>
          </aside>
        </main>
        <footer>
          <p>&copy; 2024 Mastering HTML Course</p>
        </footer>

3. Forms and Input Types

    Advanced Form Elements:
        Using new input types such as date, color, range, and more.

        html

    <form>
      <label for="birthday">Birthday:</label>
      <input type="date" id="birthday" name="birthday">
      <label for="favcolor">Favorite Color:</label>
      <input type="color" id="favcolor" name="favcolor">
      <label for="volume">Volume:</label>
      <input type="range" id="volume" name="volume" min="0" max="100">
      <input type="submit" value="Submit">
    </form>

Form Validation:

    Using HTML5 validation attributes such as required, pattern, min, max.

    html

        <form>
          <label for="email">Email:</label>
          <input type="email" id="email" name="email" required>
          <label for="password">Password:</label>
          <input type="password" id="password" name="password" required minlength="8">
          <input type="submit" value="Submit">
        </form>

4. Multimedia Integration

    Advanced Audio and Video:
        Customizing audio and video controls.

        html

    <audio controls>
      <source src="audio.mp3" type="audio/mpeg">
      Your browser does not support the audio element.
    </audio>

    <video controls width="600">
      <source src="video.mp4" type="video/mp4">
      Your browser does not support the video element.
    </video>

Embedding External Media:

    Embedding YouTube videos and other external media.

    html

        <iframe width="560" height="315" src="https://www.youtube.com/embed/dQw4w9WgXcQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

5. Canvas and SVG

    Drawing with the Canvas Element:
        Basics of the <canvas> element and 2D drawing context.

        html

    <canvas id="myCanvas" width="200" height="100"></canvas>
    <script>
      var canvas = document.getElementById('myCanvas');
      var ctx = canvas.getContext('2d');
      ctx.fillStyle = "#FF0000";
      ctx.fillRect(0, 0, 150, 75);
    </script>

Scalable Vector Graphics (SVG):

    Using SVG for vector graphics.

    html

        <svg width="100" height="100">
          <circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="red" />
        </svg>

6. Responsive Web Design

    Viewport and Media Queries:
        Using the viewport meta tag and media queries to create responsive designs.

        html

    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
      @media (max-width: 600px) {
        body {
          background-color: lightblue;
        }
      }
    </style>

Flexbox and Grid Layouts:

    Using Flexbox and Grid for advanced page layouts.

    html

        <style>
          .container {
            display: flex;
            flex-direction: column;
          }
          .grid-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
          }
        </style>
        <div class="container">
          <div class="item">Item 1</div>
          <div class="item">Item 2</div>
          <div class="item">Item 3</div>
        </div>
        <div class="grid-container">
          <div class="grid-item">1</div>
          <div class="grid-item">2</div>
          <div class="grid-item">3</div>
        </div>

7. Web Accessibility

    ARIA Roles and Properties:
        Using ARIA to enhance accessibility.

        html

        <button aria-label="Close" aria-hidden="true">X</button>

    Semantic HTML for Accessibility:
        Best practices for using semantic HTML to improve accessibility.

8. HTML APIs

    Geolocation API:
        Using the Geolocation API to get user location.

        html

    <button onclick="getLocation()">Get Location</button>
    <script>
      function getLocation() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(showPosition);
        } else {
          console.log("Geolocation is not supported by this browser.");
        }
      }

      function showPosition(position) {
        console.log("Latitude: " + position.coords.latitude + 
        " Longitude: " + position.coords.longitude);
      }
    </script>

Drag and Drop API:

    Implementing drag and drop functionality.

    html

        <div id="drag1" draggable="true" ondragstart="drag(event)">Drag me</div>
        <div id="dropzone" ondrop="drop(event)" ondragover="allowDrop(event)">Drop here</div>
        <script>
          function allowDrop(event) {
            event.preventDefault();
          }

          function drag(event) {
            event.dataTransfer.setData("text", event.target.id);
          }

          function drop(event) {
            event.preventDefault();
            var data = event.dataTransfer.getData("text");
            event.target.appendChild(document.getElementById(data));
          }
        </script>

9. Performance Optimization

    Best Practices for Performance:
        Minimizing HTML, CSS, and JavaScript.
        Using async and defer for script loading.

        html

    <script src="script.js" async></script>
    <script src="script.js" defer></script>

Lazy Loading:

    Implementing lazy loading for images and iframes.

    html

<img src="image.jpg" loading="lazy" alt="Lazy Loaded Image">
<iframe src="video.mp4" loading="lazy"></iframe>