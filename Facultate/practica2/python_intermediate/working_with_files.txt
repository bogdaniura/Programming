working_with_files.txt
===Opening Files===
You can use Python to read and write the contents of files.

This is particularly useful when you need to work with a lot of data that is saved in a file. 

For example, in data science and analytics, the data is commonly in CSV (comma-separated values) files.

Let's start by working with text files, as they are the easiest to manipulate. 

Before a file can be edited, it must be opened, using the open function. 
You can specify the mode used to open a file by applying a second argument to the open function.

Sending "r" means open in read mode, which is the default. 

Sending "w" means write mode, for rewriting the contents of a file.

Sending "a" means append mode, for adding new content to the end of the file.

Adding "b" to a mode opens it in binary mode, which is used for non-text files (such as image and sound files).
Once a file has been opened and used, you should close it.

This is done with the close method of the file object. 
===Reading Files===
The contents of a file that has been opened in text mode can be read using the read method. 

We have created a books.txt file on the server which includes titles of books.
To read only a certain amount of a file, you can provide the number of bytes to read as an argument to the read function. 

Each ASCII character is 1 byte: 
To retrieve each line in a file, you can use the readlines() method to return a list in which each element is a line in the file.
===Writing Files===
To write to files you use the write method.
If you want to add content to an existing file, you can open it using the "a" mode, which stand for "append": 
The write method returns the number of bytes written to a file, if successful.
===Working with Files===
It is good practice to avoid wasting resources by making sure that files are always closed after they have been used. One way of doing this is to use try and finally.
An alternative way of doing this is by using with statements.This creates a temporary variable (often called f),  which is only accessible in the indented block of the with statement. 
